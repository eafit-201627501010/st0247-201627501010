
   # @clase digraphAl
   # Descripcion: implementacr grafo con listas
   # @author David Sanchez Arboleda / Estefania Zapata
   # @version 1.0



class digraphAL:

    def __init__(self, size):
        self.size=size
        #Crear una lista
        self.lista=[]
        #Recorro de la posicion cero a el tamaño asignado creando listas en cada posicion
        for i in range(size+1): self.lista.append([])

    def add_arc(self,source,destination,weight=1):
        #Añadir una tupla en el vertice asignado que contiene el vertice adyacente con el peso de la arista que por defecto es 1
        self.lista[source].append((destination,weight))

 
    def get_successors(self,vertex):
        #Crear una lista
        successors=[]
        #Recorrido de la lista del vertice especificado
        for i in range(len(self.lista[vertex])):
            #Añadir a la lista creada todos los vertices adyacientes al vertice especificado
            successors.append(self.lista[vertex][i][0])
        #Retorno la lista creada
        return successors


    def get_weight(self,source,destination):
        #Recorro la lista de mi vertice especificado
        for i in range(len(self.lista[source])):
            #Si en la lista del vertice especificado se encuentra el vertice de destino retorno el peso de el arco de los dos
            if self.lista[source][i][0]==destination:
                return self.lista[source][i][1]
        #Retorno cero por defecto
        return 0
